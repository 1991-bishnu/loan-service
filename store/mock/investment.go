// Code generated by MockGen. DO NOT EDIT.
// Source: investment.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	entity "github.com/1991-bishnu/loan-service/db/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockInvestment is a mock of Investment interface.
type MockInvestment struct {
	ctrl     *gomock.Controller
	recorder *MockInvestmentMockRecorder
}

// MockInvestmentMockRecorder is the mock recorder for MockInvestment.
type MockInvestmentMockRecorder struct {
	mock *MockInvestment
}

// NewMockInvestment creates a new mock instance.
func NewMockInvestment(ctrl *gomock.Controller) *MockInvestment {
	mock := &MockInvestment{ctrl: ctrl}
	mock.recorder = &MockInvestmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvestment) EXPECT() *MockInvestmentMockRecorder {
	return m.recorder
}

// GetByLoanID mocks base method.
func (m *MockInvestment) GetByLoanID(ctx context.Context, loadID string) ([]*entity.Investment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLoanID", ctx, loadID)
	ret0, _ := ret[0].([]*entity.Investment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLoanID indicates an expected call of GetByLoanID.
func (mr *MockInvestmentMockRecorder) GetByLoanID(ctx, loadID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLoanID", reflect.TypeOf((*MockInvestment)(nil).GetByLoanID), ctx, loadID)
}

// Insert mocks base method.
func (m *MockInvestment) Insert(ctx context.Context, investment *entity.Investment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, investment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockInvestmentMockRecorder) Insert(ctx, investment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockInvestment)(nil).Insert), ctx, investment)
}
