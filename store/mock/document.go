// Code generated by MockGen. DO NOT EDIT.
// Source: document.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	entity "github.com/1991-bishnu/loan-service/db/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockDocument is a mock of Document interface.
type MockDocument struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentMockRecorder
}

// MockDocumentMockRecorder is the mock recorder for MockDocument.
type MockDocumentMockRecorder struct {
	mock *MockDocument
}

// NewMockDocument creates a new mock instance.
func NewMockDocument(ctrl *gomock.Controller) *MockDocument {
	mock := &MockDocument{ctrl: ctrl}
	mock.recorder = &MockDocumentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocument) EXPECT() *MockDocumentMockRecorder {
	return m.recorder
}

// GetByLoanID mocks base method.
func (m *MockDocument) GetByLoanID(ctx context.Context, loanID string) ([]*entity.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLoanID", ctx, loanID)
	ret0, _ := ret[0].([]*entity.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLoanID indicates an expected call of GetByLoanID.
func (mr *MockDocumentMockRecorder) GetByLoanID(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLoanID", reflect.TypeOf((*MockDocument)(nil).GetByLoanID), ctx, loanID)
}

// GetByLoanIDAndType mocks base method.
func (m *MockDocument) GetByLoanIDAndType(ctx context.Context, loanID, docType string) (*entity.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLoanIDAndType", ctx, loanID, docType)
	ret0, _ := ret[0].(*entity.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLoanIDAndType indicates an expected call of GetByLoanIDAndType.
func (mr *MockDocumentMockRecorder) GetByLoanIDAndType(ctx, loanID, docType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLoanIDAndType", reflect.TypeOf((*MockDocument)(nil).GetByLoanIDAndType), ctx, loanID, docType)
}

// Insert mocks base method.
func (m *MockDocument) Insert(ctx context.Context, loan *entity.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDocumentMockRecorder) Insert(ctx, loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDocument)(nil).Insert), ctx, loan)
}
